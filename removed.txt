export async function processOrderController(req: Request, res: Response) {
    // get order id
    const orderId = req.body.orderId;
  
    try {
      // find order by id
      const order = await Order.findById(orderId);
  
      // check if order exists
      if (!order) {
        return res.status(404).json({ message: 'Order not found' });
      }
  
      // fetch the image by url
      const url = "https://storage.googleapis.com/stickify-storage/" + order.sticker?.design;
  
  
  
  
  
      // pixels for each cm
      const cm = 30;
  
      // spacing between stickers
      const spacing = 0.1 * cm;
  
      // size of sticker by cm (including spacing)
      const [sizeX, sizeY] = translateSizing(order.sticker?.size as string);
  
      // sheet dimensions
      const canvasWidth = 21 * cm;
      const canvasHeight = 40 * cm;
      const ceil = 0;
  
  
  
  
  
  
      // download the image
      axios.get(url, { responseType: 'arraybuffer' })
        .then((response) => {
          // Use sharp to resize the image and save it directly
          return sharp(Buffer.from(response.data))
            .resize(truncateDecimal(sizeX * cm - (spacing * 2),ceil), truncateDecimal(sizeY * cm - (spacing * 2),ceil)) // Adjust the dimensions as needed
            .toBuffer();
        })
        .then(async (resizedBuffer) => {
  
          const canvasSharp = sharp({
            create: {
              width: canvasWidth,
              height: canvasHeight,
              channels: 4,
              background: { r: 0, g: 0, b: 0, alpha: 0 },
            },
          }).png();
  
          // Paste the resized image onto the canvas multiple times
          const stickers = [];
          const gridSize = {
            columns: Math.floor(canvasWidth / (sizeX * cm)),
            rows: Math.floor(canvasHeight / (sizeY * cm)),
          };
          // long of each step 
          const cellWidth = Math.ceil(sizeX * cm);
          const cellHeight = Math.ceil(sizeY * cm);
          
          // calculate the margin
  
          const marginX = Math.ceil((canvasWidth - (gridSize.columns * cellWidth)) / 2) ;
          const marginY = Math.ceil((canvasHeight - (gridSize.rows * cellHeight)) / 2) ;
  
          console.log(gridSize)
          for (let row = 0; row < gridSize.rows; row++) {
            for (let col = 0; col < gridSize.columns; col++) {
              stickers.push({
                input: resizedBuffer,
                top: truncateDecimal(row * cellHeight+spacing+marginY,ceil),
                left: truncateDecimal(col * cellWidth+spacing+marginX,ceil),
                blend: 'over' as sharp.Blend // Use sharp.Blend for TypeScript
              });
            }
          }
  
          canvasSharp.composite(stickers);
          return canvasSharp.toBuffer();
        })
        .then((canvasBuffer) => {
          // this one is just for naming the image with the size of it
          const gridSize = {
            columns: Math.floor(canvasWidth / (sizeX * cm)),
            rows: Math.floor(canvasHeight / (sizeY * cm)),
          };
  
  
  
          if(false ){
  
            const desktopPath = path.join(os.homedir(), 'Desktop')
            const outputFilePath = path.join(desktopPath,`stickify/${sizeX}x${sizeY} - (${gridSize.rows*gridSize.columns} sticker).png`)
  
            fs.writeFileSync(outputFilePath, canvasBuffer);
            console.log('Image saved to:', outputFilePath);
  
  
          }else{
  
            const storage = new Storage({
              projectId: config.projectId,
              keyFilename: config.keyFilename,
            });
           
            try {
  
            const bucket = storage.bucket(config.bucketName);
            const ID = String(req.body.sheetId);
            const fileName = `sheetsSnapshots/${ID}.png`;
            const blob = bucket.file(fileName);
            
            
            blob.createWriteStream({
              resumable: false, // You can set resumable to true if you want to enable resumable uploads
              metadata: {
                contentType: 'image/png', // Set the content type accordingly
              },
            })
              .on('error', (err) => {
                console.error('Error uploading to Google Cloud Storage:', err);
                res.status(500).send('Internal Server Error');
              })
              .on('finish', () => {
                console.log('sheet uploaded to Google Cloud Storage.');
              })
              .end(canvasBuffer);
  
  
  
  
            }catch(e){
              console.log(e)
            }
          }
  
  
  
        })
        .catch((error) => console.error('Error:', error));
  
      return res.status(200).json({ order });
  
    } catch (error) {
      return res.status(500).json({ message: error });
    }
  }










router.post('/create', async (req: Request, res: Response) => {
    try {
      const {
        customerId,
        serviceType,
        quantity,
        sticker,
        label,
        cup,
        t_shirt,
      } = req.body;
  
      // Validate serviceType
      if (!['sticker', 'label', 'cup', 't-shirt'].includes(serviceType)) {
        return res.status(400).json({ message: 'Invalid serviceType' });
      }
  
      // Validate sticker type for 'sticker' serviceType
      if (serviceType === 'sticker' && !stickersTypes.includes(sticker.type)) {
        return res.status(400).json({ message: 'Invalid sticker type' });
      }
  


      // Create an order
      const order = new Order({
        ...req.body
      });
  
      // Save the order to the database
      await order.save();



    if(serviceType === "sticker"){
      // looping the container and make sheets
      for (let i = 0; i < quantity; i++) {

        try {

            const sheet = new Sheet();
            sheet.order = order._id;
            sheet.stickerUrl = sticker.design;
            sheet.size = sticker.size;
            sheet.type = sticker.type;
            const myContainer =await Container.findOne({ isOpen: "open",state:"filling" }).exec();

            if (myContainer !== null) {
                sheet.container = myContainer?._id;
                sheet.snapshot = String(sheet._id);
                // make sheets of container ++ , and add snapshot to sheetsId
                await Container.findByIdAndUpdate(myContainer._id, { $inc: { sheets: 1 } , $push: { sheetsIds: sheet._id } });
                if(myContainer.sheets === 3){
                    await Container.findByIdAndUpdate(myContainer._id, { $set: { state: "ready", isOpen: "closed" } });
                }
            } else {
                const container = new Container();
                container.sheets = 1;
                container.sheetsIds = [sheet._id];
                container.serverTime = new Date();
                sheet.container = container._id;
                sheet.snapshot = String(sheet._id);
                const containerId = container._id;
                setTimeout(async() => {
                  const getC = await Container.findById(containerId);
                  // we get the container to see if it is ready already or not
                  if(getC?.state === "ready"){
                    return;
                  }
                  await Container.findByIdAndUpdate(containerId, { $set: { isOpen: "closed", state: "ready" } });
                  console.log("container closed");
                  io.emit("container closed");
                },1000*60*1)
                await container.save();
            }


            // upload a snapshot of the sheet
            await axios.post("http://localhost:3001/orders/process",{
              orderId:order._id,
              sheetId:sheet._id
            })
            await sheet.save();

        } catch (error) {console.log(error)}
      }

      }

    






  
          res.status(201).json(order);


    } catch (error) {
      console.error(error);
      res.status(500).json({ message: 'Internal Server Error' });
    }
  });